plugins {
    id 'java'
    id "fi.evident.apina" version "0.16.0"
    id 'org.springframework.boot' version '2.4.5'
    id "org.flywaydb.flyway" version "7.8.2"
}

apply plugin: 'io.spring.dependency-management'

group 'com.kelvin.petstore'

version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
}

test {
    useJUnitPlatform()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'

    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-jdbc')
    implementation('org.springframework.boot:spring-boot-starter-data-jdbc')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '2.4.5'

    implementation('org.dalesbred:dalesbred:1.3.3')
    testImplementation('org.dalesbred:dalesbred-junit:1.3.3')

    implementation('org.postgresql:postgresql')

    implementation('org.flywaydb:flyway-core:7.8.2')

    implementation('org.json:json:20210307')

}


apina {
    // Set the name of the created TypeScript file. Default is 'build/apina/apina.ts'.
    //target = new File(project(":frontend").projectDir, 'app/apina-api.ts')

    // How Java enums are translated to TypeScript enums? (Default mode is 'default'.)
    //  - 'default'      => enum MyEnum { FOO = "FOO", BAR = "BAR", BAZ = "BAZ" }
    //  - 'int_enum'     => enum MyEnum { FOO, BAR, BAZ }
    //  - 'string_union' => type MyEnum = "FOO" | "BAR" | "BAZ"
    enumMode = 'default'

    // Which controllers to include when generating API? Defaults to everything.
    //endpoints = [/my\.package\.foo\..+/]

    // If generated URLs would start with given prefix, removes it. Useful when configuring Apina
    // to work behind reverse proxies. Defaults to empty string (URL is not modified).
    //removedUrlPrefix = "/foo"

    // Code generation target (Default is 'angular')
    // - 'angular' => Generate Angular module that uses Angular's HttpClient
    // - 'es6' => Generate code that uses Fetch API and has no dependencies apart from ES6
    platform = 'angular'
}
